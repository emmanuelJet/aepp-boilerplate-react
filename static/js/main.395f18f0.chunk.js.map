{"version":3,"sources":["utils/aeternity.js","logo.svg","actions/actionTypes.js","reducers/index.js","store/index.js","configs/node.js","App.js","actions/actionCreator.js","reportWebVitals.js","index.js"],"names":["client","actionTypes","ADD_SDK","state","payload","newState","Object","assign","sdk","ADD_ADDRESS","address","ADD_ADDRESS_BALANCE","balance","initialState","rootReducer","action","type","store","createStore","applyMiddleware","thunk","nodeConfig","testnet","name","url","middlewareUrl","mainnet","compilerUrl","scanForWallets","Error","scannerConnection","BrowserWindowMessageConnection","connectionInfo","id","detector","WalletDetector","connection","Promise","resolve","scan","a","newWallet","window","confirm","getConnection","connectToWallet","subscribeAddress","stopScan","aeternitySDK","Node","internalUrl","instance","node","nodes","getState","RpcAepp","onNetworkChange","params","selectNode","networkId","then","value","stateBalance","toAe","AE_AMOUNT_FORMATS","AE","catch","onAddressChange","addresses","onDisconnect","dispatch","scannedAddress","console","error","connect","useState","clientReady","useEffect","sdkResponse","log","addressBalance","err","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.395f18f0.chunk.js","sourcesContent":["import { \n\tNode,\n\tRpcAepp\n} from \"@aeternity/aepp-sdk/es\";\nimport { toAe, AE_AMOUNT_FORMATS } from '@aeternity/aepp-sdk/es/utils/amount-formatter';\nimport WalletDetector from \"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector\";\nimport BrowserWindowMessageConnection from \"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message\";\n\nimport store from \"../store\";\nimport nodeConfig from \"../configs/node\";\n\nlet client;\n\nconst scanForWallets = () => {\n\tif (!client) throw new Error(\"Use aeternitySDK first\");\n  const scannerConnection = BrowserWindowMessageConnection({\n    connectionInfo: { id: 'spy' }\n  });\n  const detector = WalletDetector({ connection: scannerConnection });\n\n\treturn new Promise((resolve) => {\n    detector.scan(async ({ newWallet }) => {\n      if (!newWallet) return;\n\n\t\t\tif (window.confirm(`Do you want to connect to wallet ${newWallet.name}`)) {\n\t\t\t\tawait client.connectToWallet(await newWallet.getConnection())\n\t\t\t\tawait client.subscribeAddress(\"subscribe\", \"current\")\n\n\t\t\t\tlet address = client.address();\n\t\t\t\tif (!address) return;\n\n\t\t\t\tdetector.stopScan()\n\t\t\t\tresolve(address);\n\t\t\t}\n    });\n  });\n};\n\n\nexport const aeternitySDK = async (state) => {\n  try {\n    const node = {\n      nodes: [\n        {\n          name: nodeConfig.testnet.name,\n          instance: await Node({\n            url: nodeConfig.testnet.url,\n            internalUrl: nodeConfig.testnet.middlewareUrl,\n          }),\n        },\n\t\t\t\t{\n          name: nodeConfig.mainnet.name,\n          instance: await Node({\n            url: nodeConfig.mainnet.url,\n            internalUrl: nodeConfig.mainnet.middlewareUrl,\n          }),\n        }\n      ],\n      compilerUrl: nodeConfig.compilerUrl,\n    };\n\t\tstate = store.getState();\n\n    client = await RpcAepp({\n      name: \"aepp-boilerplate\",\n\t\t\t...node,\n\t\t\tonNetworkChange: async (params) => {\n\t\t\t\tclient.selectNode(params.networkId);\n\n\t\t\t\tstate.sdk = client;\n\t\t\t\tstate.address = await client.address();\n\t\t\t\tclient.balance(state.address).then((value) => {\n\t\t\t\t\tlet stateBalance = toAe(value) + ' ' + AE_AMOUNT_FORMATS.AE;\n\n\t\t\t\t\tstate.balance = stateBalance;\n\t\t\t\t}).catch(() => '0 ' + AE_AMOUNT_FORMATS.AE);\n\t\t\t},\n\t\t\tonAddressChange:  async (addresses) => {\n\t\t\t\tstate.sdk = client;\n\t\t\t\tstate.address = await client.address();\n\t\t\t\tclient.balance(state.address).then((value) => {\n\t\t\t\t\tlet stateBalance = toAe(value) + ' ' + AE_AMOUNT_FORMATS.AE;\n\n\t\t\t\t\tstate.balance = stateBalance;\n\t\t\t\t}).catch(() => '0 ' + AE_AMOUNT_FORMATS.AE);\n\t\t\t},\n      onDisconnect() {\n        store.dispatch('resetState');\n      },\n    });\n    \n\t\tlet scannedAddress = await scanForWallets();\n\n    return { client, scannedAddress };\n  } catch (err) {\n    console.error(err);\n    return;\n  }\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const addSDK = (state, payload) => {\n\tlet newState = Object.assign({}, state);\n\tnewState.sdk = payload;\n\treturn newState;\n};\n\nconst addAddress = (state, payload) => {\n\tlet newState = Object.assign({}, state);\n\tnewState.address = payload;\n\treturn newState;\n};\n\nconst addAddressBalance = (state, payload) => {\n\tlet newState = Object.assign({}, state);\n\tnewState.balance = payload;\n\treturn newState;\n};\n\nlet actionTypes = {\n\tADD_SDK: addSDK,\n\tADD_ADDRESS: addAddress,\n\tADD_ADDRESS_BALANCE: addAddressBalance,\n};\nexport default actionTypes;\n","import actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n\tsdk: {},\n\taddress: '',\n\tbalance: ''\n};\n\nconst rootReducer = (state = initialState, action) => {\n\tif (action.type in actionTypes) {\n\t\treturn actionTypes[action.type](state, action.payload);\n\t} \n\n\treturn state;\n};\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","const nodeConfig = {\n\ttestnet: {\n\t\tname: \"ae_uat\",\n\t\turl: \"https://testnet.aeternity.io\",\n\t\tmiddlewareUrl: \"https://testnet.aeternity.io/mdw\",\n\t},\n\tmainnet: {\n\t\tname: \"ae_mainnet\",\n\t\turl: \"https://mainnet.aeternity.io\",\n\t\tmiddlewareUrl: \"https://mainnet.aeternity.io/mdw\",\n\t},\n\tcompilerUrl: \"https://compiler.aepps.com\",\n};\n\nexport default nodeConfig;\n","import { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { toAe, AE_AMOUNT_FORMATS } from '@aeternity/aepp-sdk/es/utils/amount-formatter';\n\nimport './App.css';\nimport logo from './logo.svg';\nimport {\n  addSDK,\n\taddAddress,\n  addAddressBalance,\n} from \"./actions/actionCreator\";\nimport { aeternitySDK } from \"./utils/aeternity\";\n\nconst App = ({ dispatch }) => {\n\tconst [client, clientReady] = useState(null);\n\n\tuseEffect(() => {\n    try {\n\t\t\t(async () => {\n\t\t\t\tlet sdkResponse = await aeternitySDK();\n\n\t\t\t\tdispatch(addSDK(sdkResponse.client));\n\t\t\t\tdispatch(addAddress(sdkResponse.scannedAddress));\n\t\t\t\tconsole.log(\"Current Address\", sdkResponse.scannedAddress);\n\n\t\t\t\tsdkResponse.client.balance(sdkResponse.scannedAddress).then((value) => {\n\t\t\t\t\tlet addressBalance = toAe(value) + ' ' + AE_AMOUNT_FORMATS.AE;\n\n\t\t\t\t\tdispatch(addAddressBalance(addressBalance));\n\t\t\t\t\tconsole.log(\"Current Balance\", addressBalance);\n\t\t\t\t}).catch(() => '0 ' + AE_AMOUNT_FORMATS.AE);\n\n\t\t\t\tclientReady(true);\t\t\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconsole.error('SDK not loaded correctly or loaded for the first time', err);\n\n\t\t\tclientReady(false)\n\t\t}\n  }, [dispatch]);\n\n\tlet displayMessage = () => {\n\t\tif (client) {\n\t\t\treturn `See console for the connected account details`\n\t\t} else {\n\t\t\treturn `Account not connected`\n\t\t}\n\t}\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n\t\t\t\t\t{displayMessage()}\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://aeternity.com/awesome-aeternity\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n\t\t\t\t\tawesome æternity\n        </a>\n      </header>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({ state });\n\nexport default connect(mapStateToProps, null)(App);\n","const addSDK = (sdk) => ({\n\ttype: \"ADD_SDK\",\n\tpayload: sdk,\n});\n\nconst addAddress = (address) => ({\n\ttype: \"ADD_ADDRESS\",\n\tpayload: address,\n});\n\nconst addAddressBalance = (balance) => ({\n\ttype: \"ADD_ADDRESS_BALANCE\",\n\tpayload: balance,\n});\n\nexport {\n\taddSDK,\n\taddAddress,\n\taddAddressBalance\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\n\nimport './index.css';\nimport App from './App';\nimport store from \"./store\";\nimport reportWebVitals from './reportWebVitals';\n\nwindow.store = store;\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}