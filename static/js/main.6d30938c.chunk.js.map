{"version":3,"sources":["utils/aeternity.js","logo.svg","configs/node.js","hooks/useAeternitySDK.js","App.js","reportWebVitals.js","index.js"],"names":["client","nodeConfig","testnet","name","url","middlewareUrl","mainnet","compilerUrl","scanForWallets","Error","scannerConnection","BrowserWindowMessageConnection","connectionInfo","id","detector","WalletDetector","connection","Promise","resolve","scan","a","newWallet","getConnection","connectToWallet","subscribeAddress","stopScan","aeternitySDK","Node","internalUrl","instance","node","nodes","RpcAepp","onNetworkChange","params","selectNode","networkId","console","error","useAeternitySDK","sdk","useRef","useState","clientReady","useEffect","current","App","fetchAccount","address","balance","format","AmountFormatter","AE_AMOUNT_FORMATS","AE","log","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d30938c.chunk.js","sourcesContent":["import {\n\tNode,\n\tRpcAepp,\n\tWalletDetector,\n\tBrowserWindowMessageConnection\n} from \"@aeternity/aepp-sdk\";\n\nimport nodeConfig from \"../configs/node\";\n\nlet client;\n\n/**\n * Scan for user Wallet\n * \n * @returns {bool} Wallet connection status\n */\nconst scanForWallets = () => {\n\tif (!client) throw new Error(\"Execute aeternitySDK first\");\n  const scannerConnection = BrowserWindowMessageConnection({\n    connectionInfo: { id: 'spy' }\n  });\n  const detector = WalletDetector({ connection: scannerConnection });\n\n\treturn new Promise((resolve) => {\n    detector.scan(async ({ newWallet }) => {\n      if (!newWallet) return;\n\n\t\t\tawait client.connectToWallet(await newWallet.getConnection())\n\t\t\tawait client.subscribeAddress(\"subscribe\", \"current\")\n\n\t\t\tdetector.stopScan()\n\t\t\tresolve(true);\n    });\n  });\n};\n\n/**\n * Wallet connection method \n * \n * @returns {Object} RpcAepp client\n */\nexport const aeternitySDK = async () => {\n  try {\n    const node = {\n      nodes: [\n        {\n          name: nodeConfig.testnet.name,\n          instance: await Node({\n            url: nodeConfig.testnet.url,\n            internalUrl: nodeConfig.testnet.middlewareUrl,\n          }),\n        },\n\t\t\t\t{\n          name: nodeConfig.mainnet.name,\n          instance: await Node({\n            url: nodeConfig.mainnet.url,\n            internalUrl: nodeConfig.mainnet.middlewareUrl,\n          }),\n        }\n      ],\n      compilerUrl: nodeConfig.compilerUrl,\n    };\n\n    client = await RpcAepp({\n      name: \"aepp-boilerplate\",\n\t\t\t...node,\n\t\t\tonNetworkChange: async (params) => {\n\t\t\t\tclient.selectNode(params.networkId);\n\t\t\t}\n    });\n    \n\t\tawait scanForWallets();\n\n    return client;\n  } catch (err) {\n    console.error(\"SDK not loaded correctly\", err);\n    return;\n  }\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/**\n * Testnet & Mainnet nodeConfig\n * \n * @returns {Object} æ node config\n */\nconst nodeConfig = {\n\ttestnet: {\n\t\tname: \"ae_uat\",\n\t\turl: \"https://testnet.aeternity.io\",\n\t\tmiddlewareUrl: \"https://testnet.aeternity.io/mdw\",\n\t},\n\tmainnet: {\n\t\tname: \"ae_mainnet\",\n\t\turl: \"https://mainnet.aeternity.io\",\n\t\tmiddlewareUrl: \"https://mainnet.aeternity.io/mdw\",\n\t},\n\tcompilerUrl: \"https://compiler.aepps.com\",\n};\n\nexport default nodeConfig;\n","import {\n\tuseRef,\n\tuseState,\n\tuseEffect\n} from 'react';\n\nimport { aeternitySDK } from \"../utils/aeternity\";\n\n/**\n * æternitySDK Hook \n * \n * @returns {Object} æpp client\n */\nconst useAeternitySDK = () => {\n\tlet sdk = useRef();\n\tconst [client, clientReady] = useState(null);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tsdk.current = await aeternitySDK();\n\n\t\t\t\tclientReady(sdk.current);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"Error fetching aeternitySDK\", err);\n\t\t\t\tclientReady(false)\n\t\t\t}\n\t\t})();\n  }, [sdk]);\n\n\treturn client;\n}\n\nexport default useAeternitySDK;\n","import { AmountFormatter } from '@aeternity/aepp-sdk';\n\nimport './App.css';\nimport logo from './logo.svg';\nimport useAeternitySDK from './hooks/useAeternitySDK';\n\nconst App = () => {\n\tconst client = useAeternitySDK();\n\n\tconst fetchAccount = async (sdk) => {\n\t\tlet address = await sdk.address();\n\t\tlet balance = await sdk.balance(address, {\n\t\t\tformat: AmountFormatter.AE_AMOUNT_FORMATS.AE\n\t\t});\n\n\t\tconsole.log(\"Current Address:\", address);\n\t\tconsole.log(\"Current Balance:\", balance + AmountFormatter.AE_AMOUNT_FORMATS.AE);\t\n\t}\n\n\tif (client) fetchAccount(client);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n\t\t\t\t\t{\n\t\t\t\t\t\tclient\n\t\t\t\t\t\t? \"See console for the connected account details\"\n\t\t\t\t\t\t: \"Account not connected\"\n\t\t\t\t\t}\n\t\t\t\t</p>\n        <a\n          className=\"App-link\"\n          href=\"https://aeternity.com/awesome-aeternity\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n\t\t\t\t\tawesome æternity\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}