{"version":3,"sources":["utils/aeternity.js","logo.svg","actions/actionCreator.js","actions/actionTypes.js","reducers/index.js","store/index.js","configs/node.js","App.js","reportWebVitals.js","index.js"],"names":["client","address","addAddress","type","payload","actionTypes","ADD_SDK","state","newState","Object","assign","sdk","ADD_ADDRESS","ADD_ADDRESS_BALANCE","balance","initialState","rootReducer","action","store","createStore","applyMiddleware","thunk","nodeConfig","testnet","name","url","middlewareUrl","mainnet","compilerUrl","scanForWallets","Error","scannerConnection","BrowserWindowMessageConnection","connectionInfo","id","detector","WalletDetector","connection","Promise","resolve","scan","a","newWallet","window","confirm","getConnection","connectToWallet","subscribeAddress","scannedAddress","stopScan","aeternitySDK","Node","internalUrl","instance","node","nodes","RpcAepp","onNetworkChange","params","selectNode","networkId","onDisconnect","dispatch","console","error","connect","useState","clientReady","useEffect","sdkResponse","log","then","value","addressBalance","toAe","AE_AMOUNT_FORMATS","AE","catch","err","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0314619.chunk.js","sourcesContent":["import { \n\tNode,\n\tRpcAepp\n} from \"@aeternity/aepp-sdk/es\";\nimport WalletDetector from \"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector\";\nimport BrowserWindowMessageConnection from \"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message\";\n\nimport store from \"../store\";\nimport nodeConfig from \"../configs/node\";\n\nlet client, address;\n\nconst scanForWallets = () => {\n\tif (!client) throw new Error(\"Use aeternitySDK first\");\n  const scannerConnection = BrowserWindowMessageConnection({\n    connectionInfo: { id: 'spy' }\n  });\n  const detector = WalletDetector({ connection: scannerConnection });\n\n\treturn new Promise((resolve) => {\n    detector.scan(async ({ newWallet }) => {\n      if (!newWallet) return;\n\n\t\t\tif (window.confirm(`Do you want to connect to wallet ${newWallet.name}`)) {\n\t\t\t\tawait client.connectToWallet(await newWallet.getConnection())\n\t\t\t\tawait client.subscribeAddress(\"subscribe\", \"current\")\n\n\t\t\t\tlet scannedAddress = client.address();\n\t\t\t\tif (!scannedAddress) return;\n\n\t\t\t\tdetector.stopScan()\n\t\t\t\tresolve(scannedAddress);\n\t\t\t}\n    });\n  });\n};\n\n\nexport const aeternitySDK = async () => {\n  try {\n    const node = {\n      nodes: [\n        {\n          name: nodeConfig.testnet.name,\n          instance: await Node({\n            url: nodeConfig.testnet.url,\n            internalUrl: nodeConfig.testnet.middlewareUrl,\n          }),\n        },\n\t\t\t\t{\n          name: nodeConfig.mainnet.name,\n          instance: await Node({\n            url: nodeConfig.mainnet.url,\n            internalUrl: nodeConfig.mainnet.middlewareUrl,\n          }),\n        }\n      ],\n      compilerUrl: nodeConfig.compilerUrl,\n    };\n\n    client = await RpcAepp({\n      name: \"aepp-boilerplate\",\n\t\t\t...node,\n\t\t\tonNetworkChange: async (params) => {\n\t\t\t\tclient.selectNode(params.networkId);\n\t\t\t\tclient.balance(address);\n\t\t\t},\n      onDisconnect() {\n        store.dispatch('resetState');\n      }\n    });\n    \n\t\taddress = await scanForWallets();\n\n    return { client, address };\n  } catch (err) {\n    console.error(err);\n    return;\n  }\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const addSDK = (sdk) => ({\n\ttype: \"ADD_SDK\",\n\tpayload: sdk,\n});\n\nconst addAddress = (address) => ({\n\ttype: \"ADD_ADDRESS\",\n\tpayload: address,\n});\n\nconst addAddressBalance = (balance) => ({\n\ttype: \"ADD_ADDRESS_BALANCE\",\n\tpayload: balance,\n});\n\nexport {\n\taddSDK,\n\taddAddress,\n\taddAddressBalance\n};\n","const addSDK = (state, payload) => {\n\tlet newState = Object.assign({}, state);\n\tnewState.sdk = payload;\n\treturn newState;\n};\n\nconst addAddress = (state, payload) => {\n\tlet newState = Object.assign({}, state);\n\tnewState.address = payload;\n\treturn newState;\n};\n\nconst addAddressBalance = (state, payload) => {\n\tlet newState = Object.assign({}, state);\n\tnewState.balance = payload;\n\treturn newState;\n};\n\nlet actionTypes = {\n\tADD_SDK: addSDK,\n\tADD_ADDRESS: addAddress,\n\tADD_ADDRESS_BALANCE: addAddressBalance,\n};\nexport default actionTypes;\n","import actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n\tsdk: {},\n\taddress: '',\n\tbalance: ''\n};\n\nconst rootReducer = (state = initialState, action) => {\n\tif (action.type in actionTypes) {\n\t\treturn actionTypes[action.type](state, action.payload);\n\t} \n\n\treturn state;\n};\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","const nodeConfig = {\n\ttestnet: {\n\t\tname: \"ae_uat\",\n\t\turl: \"https://testnet.aeternity.io\",\n\t\tmiddlewareUrl: \"https://testnet.aeternity.io/mdw\",\n\t},\n\tmainnet: {\n\t\tname: \"ae_mainnet\",\n\t\turl: \"https://mainnet.aeternity.io\",\n\t\tmiddlewareUrl: \"https://mainnet.aeternity.io/mdw\",\n\t},\n\tcompilerUrl: \"https://compiler.aepps.com\",\n};\n\nexport default nodeConfig;\n","import {\n\tuseState,\n\tuseEffect\n} from 'react';\nimport { connect } from \"react-redux\";\nimport {\n\ttoAe,\n\tAE_AMOUNT_FORMATS\n} from '@aeternity/aepp-sdk/es/utils/amount-formatter';\n\nimport './App.css';\nimport logo from './logo.svg';\nimport {\n  addSDK,\n\taddAddress,\n  addAddressBalance,\n} from \"./actions/actionCreator\";\nimport { aeternitySDK } from \"./utils/aeternity\";\n\nconst App = ({ dispatch }) => {\n\tconst [client, clientReady] = useState(null);\n\n\tuseEffect(() => {\n    try {\n\t\t\t(async () => {\n\t\t\t\tconst sdkResponse = await aeternitySDK();\n\n\t\t\t\tdispatch(addSDK(sdkResponse.client));\n\t\t\t\tdispatch(addAddress(sdkResponse.address));\n\t\t\t\tconsole.log(\"Current Address:\", sdkResponse.address);\n\n\t\t\t\tsdkResponse.client.balance(sdkResponse.address).then((value) => {\n\t\t\t\t\tlet addressBalance = toAe(value) + ' ' + AE_AMOUNT_FORMATS.AE;\n\n\t\t\t\t\tdispatch(addAddressBalance(addressBalance));\n\t\t\t\t\tconsole.log(\"Current Balance:\", addressBalance);\n\t\t\t\t}).catch(() => '0 ' + AE_AMOUNT_FORMATS.AE);\n\n\t\t\t\tclientReady(true);\t\t\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconsole.error('SDK not loaded correctly or loaded for the first time', err);\n\n\t\t\tclientReady(false)\n\t\t}\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n\t\t\t\t\t{\n\t\t\t\t\t\tclient\n\t\t\t\t\t\t? \"See console for the connected account details\"\n\t\t\t\t\t\t: \"Account not connected\"\n\t\t\t\t\t}\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://aeternity.com/awesome-aeternity\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n\t\t\t\t\tawesome æternity\n        </a>\n      </header>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({ state });\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\n\nimport './index.css';\nimport App from './App';\nimport store from \"./store\";\nimport reportWebVitals from './reportWebVitals';\n\nwindow.store = store;\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}